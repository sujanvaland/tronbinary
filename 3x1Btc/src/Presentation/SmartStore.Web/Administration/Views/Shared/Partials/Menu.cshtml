@model TreeNode<SmartStore.Web.Framework.UI.MenuItem>
@using SmartStore.Services.Customers;
@using SmartStore.Services.Security;
@using SmartStore.Core.Domain.Security;
@using SmartStore.Collections;
@using SmartStore.Web.Framework.UI;
@{
	var currentCustomer = this.WorkContext.CurrentCustomer;
}
@functions {
	public string GetNodeLink(TreeNode<SmartStore.Web.Framework.UI.MenuItem> node)
	{
		if (node.HasChildren)
		{
			return "javascript:void(0)";
		}
		return node.Value.GenerateUrl(this.ViewContext.RequestContext);
	}

	public string GetItemText(TreeNode<SmartStore.Web.Framework.UI.MenuItem> node)
	{
		string result = null;

		if (node.Value.ResKey.HasValue())
		{
			result = T(node.Value.ResKey).ToHtmlString();
		}

		if (!result.HasValue() || result.IsCaseInsensitiveEqual(node.Value.ResKey))
		{
			result = node.Value.Text;
		}

		return result;
	}
}
<ul class="list-unstyled" style="font-size:22px;">
	<li>
		<a href="@Url.Action("Edit", "Customer", new { id = currentCustomer.Id, area = "Admin" })">
			@T("Admin.Header.Account")
		</a>
	</li>
	@{
		foreach (var node in Model.Children)
		{
			var item = node.Value;

			if (!item.Visible)
			{
				continue;
			}

			var imageUrl = item.ImageUrl;
			if (!imageUrl.HasValue())
			{
				imageUrl = "~/Administration/Content/images/ap-default-white.png";
			}

			string itemText = GetItemText(node);

			if (ViewBag.SelectedMenuItem == itemText)
			{
				//item.Selected = true;
			}

			var itemUrl = GetNodeLink(node);
			if (currentCustomer.IsInCustomerRole("Administrators"))
			{
				if (itemText == "Dashboard" || itemText == "Customers" || itemText == "Package" || itemText == "Promotions"
				|| itemText == "CMS" || itemText == "Ad Campaign" || itemText == "Support Ticket" || itemText == "Campaigns" || itemText == "Configuration" || itemText == "System" || itemText == "Reports")
				{
					<li data-id="nav-@item.Id" class="nav-item@(node.HasChildren ? " dropdown" : "")@(item.Id == "dashboard" ? " dropdown d-md-block" : "")">
						<a class="nav-link@(node.HasChildren ? " dropdown-toggle" : "")" @(node.HasChildren ? "data-toggle=collapse" : "") href="@(node.HasChildren ? "#"+item.Id : itemUrl)" @Html.Attr("data-toggle", "dropdown", node.HasChildren)>
							<span class="navbar-label d-none d-lg-block">@itemText</span>
						</a>
						@if (node.HasChildren)
						{
							@CreateDropdown(node.Children, true, item.Id)
						}
					</li>
				}
			}
			else
			{
				<li data-id="nav-@item.Id" class="nav-item@(node.HasChildren ? " dropdown" : "")@(item.Id == "dashboard" ? " dropdown d-none d-md-block" : "")">
					<a class="nav-link@(node.HasChildren ? " dropdown-toggle" : "")" @(node.HasChildren ? "data-toggle=collapse" : "") href="@(node.HasChildren ? "#"+item.Id : itemUrl)" @Html.Attr("data-toggle", "dropdown", node.HasChildren)>
						<span class="navbar-label d-none d-lg-block">@itemText</span>
					</a>
					@if (node.HasChildren)
					{
						@CreateDropdown(node.Children, true, item.Id)
					}
				</li>

			}
		}
	}
</ul>

@helper CreateDropdown(IEnumerable<TreeNode<SmartStore.Web.Framework.UI.MenuItem>> nodes, bool isRoot,string parent)
{
	var isFirst = true;
	var hasIcons = nodes.Any(x => x.Value.Icon.HasValue());

	<ul class="collapse list-unstyled" id="@parent">
		@foreach (var node in nodes)
		{
			var item = node.Value;

			if (!item.Visible)
			{
				continue;
			}

			string itemText = GetItemText(node);

			if (item.IsGroupHeader)
			{
				if (!isFirst)
				{
					<li class="dropdown-divider"></li>
				}
				if (item.Text.HasValue() && item.Text != "[SKIP]")
				{
					<li data-id="@item.Id" class="dropdown-header h6">@itemText</li>
				}
				isFirst = false;
				continue;
			}

			<li data-id="@item.Id">
				<a class="dropdown-item" href="@GetNodeLink(node)">
					@if (hasIcons)
					{
						var iconClass = "fa fa-fw";
						if (node.Value.Icon.HasValue())
						{
							iconClass += " fa-" + node.Value.Icon;
						}
						<i class='@iconClass'></i>
					}
					@itemText
				</a>
				@if (node.HasChildren)
				{
					@CreateDropdown(node.Children, false,"")
				}
			</li>

			isFirst = false;
		}
	</ul>
}